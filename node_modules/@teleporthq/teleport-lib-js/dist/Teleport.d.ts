import 'isomorphic-fetch';
import Target from './lib/Target';
import Generator from './lib/Generator';
import Publisher from './lib/Publisher';
import ElementsLibrary from './lib/ElementsLibrary';
import ElementsLibraryTargetMapping from './lib/ElementsLibraryTargetMapping';
import { Mapping, LibraryDefinition } from './types';
export default class Teleport {
    libraries: {
        [key: string]: ElementsLibrary;
    };
    mappings: {
        [key: string]: ElementsLibraryTargetMapping;
    };
    targets: {
        [key: string]: Target;
    };
    generators: {
        [key: string]: Generator;
    };
    publishers: {
        [key: string]: Publisher;
    };
    transformers: {
        [key: string]: object;
    };
    readPluginDefinitionFromUrl(url: string): Promise<any>;
    use(plugin: object | string): Promise<this>;
    usePlugin(pluginData: object): void;
    useLibrary(libraryDefinition: LibraryDefinition): Teleport;
    library(libraryName: string): ElementsLibrary;
    useMapping(mappingData: Mapping): Teleport;
    mapping(mappingName: string): ElementsLibraryTargetMapping | null | undefined;
    map(targetName: string, source: string, type: string): object;
    useTarget(targetName: string): Teleport;
    target(targetName: string): Target | null | undefined;
    useGenerator(generator: Generator): Teleport;
    generator(generatorName: string): Generator | null | undefined;
    usePublisher(publisher: Publisher): Teleport;
    publisher(publisherName: string): Publisher | null | undefined;
}
